## This file contains the most common config options that a user on an E3SM
## supported machine might want to customize.  The values are mostly the same
## as in mpas_analysis/default.cfg, the default config file, which has nearly
## all of the available config options.
## Usage:
##  1. Copy this file to a new name for a specific run (say myrun.cfg).
##
##  2. Modify any config options you want to change in your new config file.
##     At a minimum, you need to specify:
##       * [runs]/mainRunName -- A name for the run to be included plot titles
##                               and legends
##       * [input]/baseDirectory -- The directory for the simulation results
##                                  to analyze
##       * [input]/mpasMeshName -- The name of the MPAS ocean/sea ice mesh
##       * [output]/baseDirectory -- The directory for the analysis results
##
##  3. run:
##
##        $ mpas_analysis myrun.cfg
##
##     This will read the configuration first from mpas_analysis/default.cfg
##     and then replace that configuration with any changes from from myrun.cfg
##
##  4. If you want to run a subset of the analysis, you can either set
##     [output]/generate in your config file or use the --generate flag on the
##     command line.  See the comments for [output]/generate below for more
##     details on this option.


[runs]
## options related to the run to be analyzed and control runs to be
## compared against

# mainRunName is a name that identifies the simulation being analyzed.
mainRunName = chic_test_20_29_fris_map2_03

# config file for a control run to which this run will be compared.  The
# analysis should have already been run to completion once with this config
# file, so that the relevant MPAS climatologies already exist and have been
# remapped to the comparison grid.  Leave this option commented out if no
# control run is desired.
# controlRunConfigFile = /path/to/config/file

# config file for a main run on which the analysis was already run to
# completion.  The relevant MPAS climatologies already exist and have been
# remapped to the comparison grid and time series have been extracted.
# Leave this option commented out if the analysis for the main run should be
# performed.
# mainRunConfigFile = /path/to/config/file

[execute]
## options related to executing parallel tasks

# the number of MPI tasks to use in creating mapping files (1 means tasks run in
# serial, the default)
mapMpiTasks = 1

# "None" if ESMF should perform mapping file generation in serial without a
# command, or one of "srun" or "mpirun" if it should be run in parallel (or in
# serial but with a command)
mapParallelExec = None

# "None" if ncremap should perform remapping without a command, or "srun"
# possibly with some flags if it should be run with that command
ncremapParallelExec = None

[input]
## options related to reading in the results to be analyzed

# directory containing model results
#baseDirectory = /lcrc/group/e3sm/ac.xylar/acme_scratch/anvil/20200305.A_WCYCL1850.ne4_oQU480.anvil
baseDirectory = /lustre/scratch4/turquoise/vankova/E3SM/scratch/chicoma-cpu/20230109.GMPAS-JRA1p5-DIB-ISMF.TL319_SOwISC12to60E2r4.chicoma-cpu

# Note: an absolute path can be supplied for any of these subdirectories.
# A relative path is assumed to be relative to baseDirectory.
# In this example, results are assumed to be in <baseDirecory>/run

# subdirectory containing restart files
runSubdirectory = run
# subdirectory for ocean history files
oceanHistorySubdirectory = archive/ocn/hist
# subdirectory for sea ice history files
seaIceHistorySubdirectory = archive/ice/hist

# names of namelist and streams files, either a path relative to baseDirectory
# or an absolute path.
oceanNamelistFileName = run/mpaso_in
oceanStreamsFileName = run/streams.ocean
seaIceNamelistFileName = run/mpassi_in
seaIceStreamsFileName = run/streams.seaice

# name of the ocean and sea-ice mesh (e.g. EC30to60E2r2, WC14to60E2r3,
# ECwISC30to60E2r1, SOwISC12to60E2r4, oQU240, etc.)
#mpasMeshName = oQU480
mpasMeshName = SOwISC12to60E2r4


[output]
## options related to writing out plots, intermediate cached data sets, logs,
## etc.

# The subdirectory for the analysis and output on the web portal
subdir = ${runs:mainRunName}/clim_${climatology:startYear}-${climatology:endYear}_ts_${timeSeries:startYear}-${timeSeries:endYear}

# directory where analysis should be written
# NOTE: This directory path must be specific to each test case.
baseDirectory = /lustre/scratch4/turquoise/vankova/E3SM/analysis/${output:subdir}

# provide an absolute path to put HTML in an alternative location (e.g. a web
# portal)
htmlSubdirectory = /lustre/scratch4/turquoise/vankova/E3SM/analysis/${output:subdir}/html

# a list of analyses to generate.  Valid names can be seen by running:
#   mpas_analysis --list
# This command also lists tags for each analysis.
# Shortcuts exist to generate (or not generate) several types of analysis.
# These include:
#   'all' -- all analyses will be run
#   'all_publicObs' -- all analyses for which observations are available on the
#                      public server (the default)
#   'all_<tag>' -- all analysis with a particular tag will be run
#   'all_<component>' -- all analyses from a given component (either 'ocean'
#                        or 'seaIce') will be run
#   'only_<component>', 'only_<tag>' -- all analysis from this component or
#                                       with this tag will be run, and all
#                                       analysis for other components or
#                                       without the tag will be skipped
#   'no_<task_name>' -- skip the given task
#   'no_<component>', 'no_<tag>' -- in analogy to 'all_*', skip all analysis
#                                   tasks from the given component or with
#                                   the given tag.  Do
#                                      mpas_analysis --list
#                                   to list all task names and their tags
# an equivalent syntax can be used on the command line to override this
# option:
#    mpas_analysis analysis.cfg --generate \
#         only_ocean,no_timeSeries,timeSeriesSST
generate = ['climatologyMapAntarcticMelt','climatologyMapBSF','climatologyMapSose','climatologyMapSchmidtko','regionalTSDiagrams']

[climatologyMapBSF]
comparisonGrids = ['fris']
seasons =  ['ANN']
depthRanges = [(0.0, -10000.0)]

# colormap for model/observations
colormapNameResult = balance
# whether the colormap is indexed or continuous
#colormapTypeResult = continuous
colormapTypeResult = indexed
# color indices into colormapName for filled contours
colormapIndicesResult = numpy.array(numpy.linspace(0, 255, 14), int)
# colormap levels/values for contour boundaries
colorbarLevelsResult = [-10., -3., -1., -0.3, -0.1, -0.03, 0., 0.03, 0.1, 0.3, 1., 3., 10.]
# color indices into colormapName for filled contours
# the type of norm used in the colormap
normTypeResult = symLog
# A dictionary with keywords for the norm
normArgsResult = {'linthresh': 0.03, 'linscale': 0.5, 'vmin': -10., 'vmax': 10.}

colorbarTicksResult = [-10., -3., -1., -0.3, -0.1, -0.03, 0., 0.03, 0.1, 0.3, 1., 3., 10.]
# Adding contour lines to the figure
contourLevelsResult = [-10., -3., -1., -0.3, -0.1, -0.03, 0., 0.03, 0.1, 0.3, 1., 3., 10.]
contourThicknessResult = 0.5
contourColorResult = black

# whether the colormap is indexed or continuous
colormapTypeDifference = indexed
# color indices into colormapName for filled contours
colormapIndicesDifference = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsDifference = numpy.linspace(-2, 2, 27)
colorbarTicksDifference = [-2.,-1., 0., 1., 2.]

[climatologyMapSchmidtko]
comparisonGrids = ['fris']
seasons =  ['ANN']

[climatologyMapSchmidtkoTemperature]
## options related to plotting climatology maps of potential temperature at the
## seafloor and comparing them against data from Schmidtko et al. (2014)

# colormap for model/observations
colormapNameResult = haline
# whether the colormap is indexed or continuous
colormapTypeResult = indexed
# color indices into colormapName for filled contours
colormapIndicesResult = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsResult = numpy.linspace(-2.2, 1.8, 27)
# colormap levels/values for ticks (defaults to same as levels)
colorbarTicksResult = [-2.2, -1.9, -1.2, -0.7, -0.2,  0.3,  0.8,  1.3,  1.8]

# Adding contour lines to the figure
contourLevelsResult = [-1.9]
contourThicknessResult = 0.5
contourColorResult = black

# whether the colormap is indexed or continuous
colormapTypeDifference = indexed
# color indices into colormapName for filled contours
colormapIndicesDifference = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsDifference = numpy.linspace(-1., 1., 27)
colorbarTicksDifference = numpy.linspace(-1., 1., 11)

[climatologyMapSchmidtkoSalinity]
# colormap for model/observations
colormapNameResult = haline
# whether the colormap is indexed or continuous
colormapTypeResult = indexed
# color indices into colormapName for filled contours
colormapIndicesResult = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsResult = numpy.linspace(34., 35., 27)
# colormap levels/values for ticks (defaults to same as levels)
colorbarTicksResult = numpy.linspace(34., 35., 11)
# Adding contour lines to the figure
contourLevelsResult = [34.8]
contourThicknessResult = 0.5
contourColorResult = black

# whether the colormap is indexed or continuous
colormapTypeDifference = indexed
# color indices into colormapName for filled contours
colormapIndicesDifference = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsDifference = numpy.linspace(-1., 1., 27)
colorbarTicksDifference = numpy.linspace(-1., 1., 11)

[climatologyMapSchmidtkoPotentialDensity]
# colormap for model/observations
colormapNameResult = Spectral_r
# whether the colormap is indexed or continuous
colormapTypeResult = indexed
# color indices into colormapName for filled contours
colormapIndicesResult = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsResult = numpy.linspace(1027., 1028., 27)
# colormap levels/values for ticks (defaults to same as levels)
colorbarTicksResult = numpy.linspace(1027., 1028., 11)

# whether the colormap is indexed or continuous
colormapTypeDifference = indexed
# color indices into colormapName for filled contours
colormapIndicesDifference = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsDifference = numpy.linspace(-1., 1., 27)
colorbarTicksDifference = numpy.linspace(-1., 1., 11)


[climatologyMapSose]
comparisonGrids = ['fris']
seasons =  ['ANN']
depths = ['top','bot']
fieldList = ['temperature', 'salinity', 'mixedLayerDepth']

[climatologyMapSoseTemperatureShallow]
# colormap for model/observations
colormapNameResult = haline
# whether the colormap is indexed or continuous
colormapTypeResult = indexed
# color indices into colormapName for filled contours
colormapIndicesResult = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsResult = numpy.linspace(-2.2, 1.8, 27)
# colormap levels/values for ticks (defaults to same as levels)
colorbarTicksResult = [-2.2, -1.9, -1.2, -0.7, -0.2,  0.3,  0.8,  1.3,  1.8]

contourLevelsResult = [-1.9]
contourThicknessResult = 0.5
contourColorResult = black

# whether the colormap is indexed or continuous
colormapTypeDifference = indexed
# color indices into colormapName for filled contours
colormapIndicesDifference = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsDifference = numpy.linspace(-1., 1., 27)
colorbarTicksDifference = numpy.linspace(-1., 1., 11)


[climatologyMapSoseTemperatureDeep]
# colormap for model/observations
colormapNameResult = haline
# whether the colormap is indexed or continuous
colormapTypeResult = indexed
# color indices into colormapName for filled contours
colormapIndicesResult = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsResult = numpy.linspace(-2.2, 1.8, 27)
# colormap levels/values for ticks (defaults to same as levels)
colorbarTicksResult = [-2.2, -1.9, -1.2, -0.7, -0.2,  0.3,  0.8,  1.3,  1.8]
# Adding contour lines to the figure
contourLevelsResult = [-1.9]
contourThicknessResult = 0.5
contourColorResult = black

# whether the colormap is indexed or continuous
colormapTypeDifference = indexed
# color indices into colormapName for filled contours
colormapIndicesDifference = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsDifference = numpy.linspace(-1., 1., 27)
colorbarTicksDifference = numpy.linspace(-1., 1., 11)

[climatologyMapSoseSalinityShallow]
# colormap for model/observations
colormapNameResult = haline
# whether the colormap is indexed or continuous
colormapTypeResult = indexed
# color indices into colormapName for filled contours
colormapIndicesResult = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsResult = numpy.linspace(33.4, 35., 27)
# colormap levels/values for ticks (defaults to same as levels)
colorbarTicksResult = numpy.linspace(33.4, 35., 9)
# Adding contour lines to the figure
contourLevelsResult = [34.8]
contourThicknessResult = 0.5
contourColorResult = black

# whether the colormap is indexed or continuous
colormapTypeDifference = indexed
# color indices into colormapName for filled contours
colormapIndicesDifference = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsDifference = numpy.linspace(-1., 1., 27)
colorbarTicksDifference = numpy.linspace(-1., 1., 11)

[climatologyMapSoseSalinityDeep]
# colormap for model/observations
colormapNameResult = haline
# whether the colormap is indexed or continuous
colormapTypeResult = indexed
# color indices into colormapName for filled contours
colormapIndicesResult = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsResult = numpy.linspace(34., 35., 27)
# colormap levels/values for ticks (defaults to same as levels)
colorbarTicksResult = numpy.linspace(34., 35., 11)
# Adding contour lines to the figure
contourLevelsResult = [34.8]
contourThicknessResult = 0.5
contourColorResult = black

# whether the colormap is indexed or continuous
colormapTypeDifference = indexed
# color indices into colormapName for filled contours
colormapIndicesDifference = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsDifference = numpy.linspace(-1., 1., 27)
colorbarTicksDifference = numpy.linspace(-1., 1., 11)

[climatologyMapAntarcticMelt]
comparisonGrids = ['fris']
seasons =  ['ANN']

# colormap for model/observations
colormapNameResult = balance
# whether the colormap is indexed or continuous
colormapTypeResult = indexed
# color indices into colormapName for filled contours
colormapIndicesResult = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsResult = numpy.linspace(-2., 2., 27)
# colormap levels/values for ticks (defaults to same as levels)
colorbarTicksResult = numpy.linspace(-2., 2., 11)
# Adding contour lines to the figure
contourLevelsResult = [0.]
contourThicknessResult = 0.5
contourColorResult = black

# whether the colormap is indexed or continuous
colormapTypeDifference = indexed
# color indices into colormapName for filled contours
colormapIndicesDifference = numpy.array(numpy.linspace(0, 255, 28), int)
# colormap levels/values for contour boundaries
colorbarLevelsDifference = numpy.linspace(-2, 2, 27)

[regionalTSDiagrams]
## options related to plotting T/S diagrams of ocean regions

# the names of region groups to plot, each with its own section below
regionGroups = ['Antarctic Regions']

[TSDiagramsForAntarcticRegions]
## options related to plotting T/S diagrams of Antarctic regions
# list of regions to plot or ['all'] for all regions in the masks file.
# See "regionNames" in the antarcticRegions masks file in
# regionMaskSubdirectory for details.
#regionNames = ['all']
regionNames = ['Weddell Sea Deep','Weddell Sea Shelf','Eastern Weddell Sea Deep']

# The minimum and maximum depth over which fields are plotted, default is
# to take these values from the geojson feature's zmin and zmax properties.
zmin = -1000
zmax = 0

[climatology]
## options related to producing climatologies, typically to compare against
## observations and previous runs

# the first year over which to average climatalogies
startYear = 20
# the last year over which to average climatalogies
endYear = 29

[timeSeries]
## options related to producing time series plots, often to compare against
## observations and previous runs

# start and end years for timeseries analysis. Use endYear = end to indicate
# that the full range of the data should be used.  If errorOnMissing = False,
# the start and end year will be clipped to the valid range.  Otherwise, out
# of bounds values will lead to an error.  In a "control" config file used in
# a "main vs. control" analysis run, the range of years must be valid and
# cannot include "end" because the original data may not be available.
startYear = 20
endYear = 29

[index]
## options related to producing nino index.

# start and end years for El Nino 3.4 analysis. Use endYear = end to indicate
# that the full range of the data should be used.  If errorOnMissing = False,
# the start and end year will be clipped to the valid range.  Otherwise, out
# of bounds values will lead to an error.  In a "control" config file used in
# a "main vs. control" analysis run, the range of years must be valid and
# cannot include "end" because the original data may not be available.
startYear = 20
endYear = 29
